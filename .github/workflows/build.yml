name: build

on:
  push:
    branches:
    - master
    tags:
    - '**'
  pull_request:
    branches:
    - master

jobs:
  alpine:
    runs-on: ubuntu-20.04
    strategy:
      matrix:
        PS_VERSION: [7.1.4, 7.1.5, 7.2.0, 7.2.1, 7.2.2]
        OS: [alpine]
        OS_VARIANT: ['3.11', '3.12', '3.13', '3.14']
        TOOL_VARIANT: [git, git-sudo]
        include:
        # Base and build image full tag
        - PS_VERSION: 7.1.4
          OS: alpine
          OS_VARIANT: '3.11'
          ARCHIVE: 20211005
        - PS_VERSION: 7.1.4
          OS: alpine
          OS_VARIANT: '3.12'
          ARCHIVE: 20211005
        - PS_VERSION: 7.1.4
          OS: alpine
          OS_VARIANT: '3.13'
          ARCHIVE: 20211005
        - PS_VERSION: 7.1.5
          OS: alpine
          OS_VARIANT: '3.11'
          ARCHIVE: 20211021
        - PS_VERSION: 7.1.5
          OS: alpine
          OS_VARIANT: '3.12'
          ARCHIVE: 20211021
        - PS_VERSION: 7.1.5
          OS: alpine
          OS_VARIANT: '3.13'
          ARCHIVE: 20211021
        - PS_VERSION: 7.2.0
          OS: alpine
          OS_VARIANT: '3.11'
          ARCHIVE: 20211102
        - PS_VERSION: 7.2.0
          OS: alpine
          OS_VARIANT: '3.12'
          ARCHIVE: 20211116
        - PS_VERSION: 7.2.0
          OS: alpine
          OS_VARIANT: '3.13'
          ARCHIVE: 20211116
        - PS_VERSION: 7.2.0
          OS: alpine
          OS_VARIANT: '3.14'
          ARCHIVE: 20211116
        - PS_VERSION: 7.2.1
          OS: alpine
          OS_VARIANT: '3.12'
          ARCHIVE: 20211215
        - PS_VERSION: 7.2.1
          OS: alpine
          OS_VARIANT: '3.13'
          ARCHIVE: 20220223
        - PS_VERSION: 7.2.1
          OS: alpine
          OS_VARIANT: '3.14'
          ARCHIVE: 20220223
        - PS_VERSION: 7.2.2
          OS: alpine
          OS_VARIANT: '3.13'
          ARCHIVE: 20220318
        - PS_VERSION: 7.2.2
          OS: alpine
          OS_VARIANT: '3.14'
          ARCHIVE: 20220318
        # Excluded configurations
        exclude:
        - PS_VERSION: 7.1.4
          OS: alpine
          OS_VARIANT: '3.14'
        - PS_VERSION: 7.1.5
          OS: alpine
          OS_VARIANT: '3.14'
        - PS_VERSION: 7.2.1
          OS: alpine
          OS_VARIANT: '3.11'
        - PS_VERSION: 7.2.2
          OS: alpine
          OS_VARIANT: '3.11'
        - PS_VERSION: 7.2.2
          OS: alpine
          OS_VARIANT: '3.12'
    env:
      PS_VERSION: ${{ matrix.PS_VERSION }}
      OS: ${{ matrix.OS }}
      OS_VARIANT: ${{ matrix.OS_VARIANT }}
      TOOL_VARIANT: ${{ matrix.TOOL_VARIANT }}
      TAG_LATEST: ${{ matrix.TAG_LATEST }}
      BASE_REGISTRY_NAMESPACE: mcr.microsoft.com
      BASE_IMAGE_NAME: powershell
      BASE_TAG_FULL: ${{ matrix.PS_VERSION }}-${{ matrix.OS }}-${{ matrix.OS_VARIANT }}-${{ matrix.ARCHIVE }}
      BUILD_REGISTRY_NAMESPACE: ${{ vars.DOCKERHUB_REGISTRY_USER }}
      BUILD_IMAGE_NAME: powershell
      BUILD_TAG_FULL: ${{ matrix.PS_VERSION }}-${{ matrix.OS }}-${{ matrix.OS_VARIANT }}-${{ matrix.ARCHIVE }}-${{ matrix.TOOL_VARIANT }}
      BUILD_CONTEXT: variants/${{ matrix.OS }}/${{ matrix.TOOL_VARIANT }}
    steps:
    - uses: actions/checkout@v1
    - name: Display system info (linux)
      run: |
        set -e
        hostname
        whoami
        cat /etc/*release
        lscpu
        free
        df -h
        pwd
        docker info
        docker version
    - name: Login to docker registry
      if: startsWith(github.ref, 'refs/heads/') || startsWith(github.ref, 'refs/tags/')
      run: echo "${DOCKERHUB_REGISTRY_PASSWORD}" | docker login -u "${DOCKERHUB_REGISTRY_USER}" --password-stdin
      env:
        DOCKERHUB_REGISTRY_USER: ${{ vars.DOCKERHUB_REGISTRY_USER }}
        DOCKERHUB_REGISTRY_PASSWORD: ${{ secrets.DOCKERHUB_REGISTRY_PASSWORD }}
    - name: Build image
      run: |
        set -e
        echo "PS_VERSION: $PS_VERSION"
        echo "OS: $OS"
        echo "OS_VARIANT: $OS_VARIANT"
        echo "TOOL_VARIANT: $TOOL_VARIANT"
        echo "TAG_LATEST: $TAG_LATEST"
        echo "BASE_REGISTRY_NAMESPACE: $BASE_REGISTRY_NAMESPACE"
        echo "BASE_IMAGE_NAME: $BASE_IMAGE_NAME"
        echo "BASE_TAG_FULL: $BASE_TAG_FULL"
        echo "BUILD_REGISTRY_NAMESPACE: $BUILD_REGISTRY_NAMESPACE"
        echo "BUILD_IMAGE_NAME: $BUILD_IMAGE_NAME"
        echo "BUILD_TAG_FULL: $BUILD_TAG_FULL"
        echo "BUILD_CONTEXT: $BUILD_CONTEXT"
        echo "BASE_IMAGE: ${BASE_REGISTRY_NAMESPACE}/${BASE_IMAGE_NAME}:${BASE_TAG_FULL}"
        echo "BUILD_IMAGE: ${BUILD_REGISTRY_NAMESPACE}/${BUILD_IMAGE_NAME}:${BUILD_TAG_FULL}"
        time docker pull "${BUILD_REGISTRY_NAMESPACE}/${BUILD_IMAGE_NAME}:${BUILD_TAG_FULL}" || true
        time docker build \
            --cache-from "${BUILD_REGISTRY_NAMESPACE}/${BUILD_IMAGE_NAME}:${BUILD_TAG_FULL}" \
            -t "${BUILD_REGISTRY_NAMESPACE}/${BUILD_IMAGE_NAME}:${BUILD_TAG_FULL}" \
            --build-arg BASE_IMAGE="${BASE_REGISTRY_NAMESPACE}/${BASE_IMAGE_NAME}:${BASE_TAG_FULL}" \
            "$BUILD_CONTEXT"
        docker tag "${BUILD_REGISTRY_NAMESPACE}/${BUILD_IMAGE_NAME}:${BUILD_TAG_FULL}" "${BUILD_REGISTRY_NAMESPACE}/${BUILD_IMAGE_NAME}:${PS_VERSION}-${OS}-${OS_VARIANT}-${TOOL_VARIANT}"
        if [ "${TAG_LATEST}" = 'true' ]; then
            docker tag "${BUILD_REGISTRY_NAMESPACE}/${BUILD_IMAGE_NAME}:${BUILD_TAG_FULL}" "${BUILD_REGISTRY_NAMESPACE}/${BUILD_IMAGE_NAME}:latest"
        fi
        docker images
        docker inspect "${BUILD_REGISTRY_NAMESPACE}/${BUILD_IMAGE_NAME}:${BUILD_TAG_FULL}"
    - name: Test image
      run: docker run -t --rm --entrypoint pwsh "${BUILD_REGISTRY_NAMESPACE}/${BUILD_IMAGE_NAME}:${BUILD_TAG_FULL}" -c '$PSVersionTable'
    - name: Push image
      if: startsWith(github.ref, 'refs/tags/')
      run: docker push -a "${BUILD_REGISTRY_NAMESPACE}/${BUILD_IMAGE_NAME}"
    - name: Clean-up
      if: always()
      run: docker logout
  ubuntu:
    runs-on: ubuntu-20.04
    strategy:
      matrix:
        PS_VERSION: [7.1.4, 7.1.5, 7.2.0, 7.2.1, 7.2.2]
        OS: [ubuntu]
        OS_VARIANT: [18.04, 20.04]
        TOOL_VARIANT: [git, git-sudo]
        include:
        # Base and build image full tag
        - PS_VERSION: 7.1.4
          OS: ubuntu
          OS_VARIANT: 18.04
          ARCHIVE: 20211005
        - PS_VERSION: 7.1.4
          OS: ubuntu
          OS_VARIANT: 20.04
          ARCHIVE: 20211005
        - PS_VERSION: 7.1.5
          OS: ubuntu
          OS_VARIANT: 18.04
          ARCHIVE: 20211021
        - PS_VERSION: 7.1.5
          OS: ubuntu
          OS_VARIANT: 20.04
          ARCHIVE: 20211021
        - PS_VERSION: 7.2.0
          OS: ubuntu
          OS_VARIANT: 18.04
          ARCHIVE: 20211116
        - PS_VERSION: 7.2.0
          OS: ubuntu
          OS_VARIANT: 20.04
          ARCHIVE: 20211116
        - PS_VERSION: 7.2.1
          OS: ubuntu
          OS_VARIANT: 18.04
          ARCHIVE: 20220223
        - PS_VERSION: 7.2.1
          OS: ubuntu
          OS_VARIANT: 20.04
          ARCHIVE: 20220223
        - PS_VERSION: 7.2.2
          OS: ubuntu
          OS_VARIANT: 18.04
          ARCHIVE: 20220318
        - PS_VERSION: 7.2.2
          OS: ubuntu
          OS_VARIANT: 20.04
          ARCHIVE: 20220318
        # Build image default tagging
        - PS_VERSION: 7.2.2
          OS: ubuntu
          OS_VARIANT: 20.04
          TOOL_VARIANT: git
          TAG_LATEST: true
    env:
      PS_VERSION: ${{ matrix.PS_VERSION }}
      OS: ${{ matrix.OS }}
      OS_VARIANT: ${{ matrix.OS_VARIANT }}
      TOOL_VARIANT: ${{ matrix.TOOL_VARIANT }}
      TAG_LATEST: ${{ matrix.TAG_LATEST }}
      BASE_REGISTRY_NAMESPACE: mcr.microsoft.com
      BASE_IMAGE_NAME: powershell
      BASE_TAG_FULL: ${{ matrix.PS_VERSION }}-${{ matrix.OS }}-${{ matrix.OS_VARIANT }}-${{ matrix.ARCHIVE }}
      BUILD_REGISTRY_NAMESPACE: ${{ vars.DOCKERHUB_REGISTRY_USER }}
      BUILD_IMAGE_NAME: powershell
      BUILD_TAG_FULL: ${{ matrix.PS_VERSION }}-${{ matrix.OS }}-${{ matrix.OS_VARIANT }}-${{ matrix.ARCHIVE }}-${{ matrix.TOOL_VARIANT }}
      BUILD_CONTEXT: variants/${{ matrix.OS }}/${{ matrix.TOOL_VARIANT }}
    steps:
    - uses: actions/checkout@v1
    - name: Display system info (linux)
      run: |
        set -e
        hostname
        whoami
        cat /etc/*release
        lscpu
        free
        df -h
        pwd
        docker info
        docker version
    - name: Login to docker registry
      if: startsWith(github.ref, 'refs/heads/') || startsWith(github.ref, 'refs/tags/')
      run: echo "${DOCKERHUB_REGISTRY_PASSWORD}" | docker login -u "${DOCKERHUB_REGISTRY_USER}" --password-stdin
      env:
        DOCKERHUB_REGISTRY_USER: ${{ vars.DOCKERHUB_REGISTRY_USER }}
        DOCKERHUB_REGISTRY_PASSWORD: ${{ secrets.DOCKERHUB_REGISTRY_PASSWORD }}
    - name: Build image
      run: |
        set -e
        echo "PS_VERSION: $PS_VERSION"
        echo "OS: $OS"
        echo "OS_VARIANT: $OS_VARIANT"
        echo "TOOL_VARIANT: $TOOL_VARIANT"
        echo "TAG_LATEST: $TAG_LATEST"
        echo "BASE_REGISTRY_NAMESPACE: $BASE_REGISTRY_NAMESPACE"
        echo "BASE_IMAGE_NAME: $BASE_IMAGE_NAME"
        echo "BASE_TAG_FULL: $BASE_TAG_FULL"
        echo "BUILD_REGISTRY_NAMESPACE: $BUILD_REGISTRY_NAMESPACE"
        echo "BUILD_IMAGE_NAME: $BUILD_IMAGE_NAME"
        echo "BUILD_TAG_FULL: $BUILD_TAG_FULL"
        echo "BUILD_CONTEXT: $BUILD_CONTEXT"
        echo "BASE_IMAGE: ${BASE_REGISTRY_NAMESPACE}/${BASE_IMAGE_NAME}:${BASE_TAG_FULL}"
        echo "BUILD_IMAGE: ${BUILD_REGISTRY_NAMESPACE}/${BUILD_IMAGE_NAME}:${BUILD_TAG_FULL}"
        time docker pull "${BUILD_REGISTRY_NAMESPACE}/${BUILD_IMAGE_NAME}:${BUILD_TAG_FULL}" || true
        time docker build \
            --cache-from "${BUILD_REGISTRY_NAMESPACE}/${BUILD_IMAGE_NAME}:${BUILD_TAG_FULL}" \
            -t "${BUILD_REGISTRY_NAMESPACE}/${BUILD_IMAGE_NAME}:${BUILD_TAG_FULL}" \
            --build-arg BASE_IMAGE="${BASE_REGISTRY_NAMESPACE}/${BASE_IMAGE_NAME}:${BASE_TAG_FULL}" \
            "$BUILD_CONTEXT"
        docker tag "${BUILD_REGISTRY_NAMESPACE}/${BUILD_IMAGE_NAME}:${BUILD_TAG_FULL}" "${BUILD_REGISTRY_NAMESPACE}/${BUILD_IMAGE_NAME}:${PS_VERSION}-${OS}-${OS_VARIANT}-${TOOL_VARIANT}"
        if [ "${TAG_LATEST}" = 'true' ]; then
            docker tag "${BUILD_REGISTRY_NAMESPACE}/${BUILD_IMAGE_NAME}:${BUILD_TAG_FULL}" "${BUILD_REGISTRY_NAMESPACE}/${BUILD_IMAGE_NAME}:latest"
        fi
        docker images
        docker inspect "${BUILD_REGISTRY_NAMESPACE}/${BUILD_IMAGE_NAME}:${BUILD_TAG_FULL}"
    - name: Test image
      run: docker run -t --rm --entrypoint pwsh "${BUILD_REGISTRY_NAMESPACE}/${BUILD_IMAGE_NAME}:${BUILD_TAG_FULL}" -c '$PSVersionTable'
    - name: Push image
      if: startsWith(github.ref, 'refs/tags/')
      run: docker push -a "${BUILD_REGISTRY_NAMESPACE}/${BUILD_IMAGE_NAME}"
    - name: Clean-up
      if: always()
      run: docker logout

  dockerhub-description:
    runs-on: ubuntu-20.04
    needs: [alpine, ubuntu]
    if: github.ref == 'refs/heads/master'
    steps:
    - uses: actions/checkout@v3
    - uses: peter-evans/dockerhub-description@v3
      with:
        username: ${{ vars.DOCKERHUB_REGISTRY_USER }}
        password: ${{ secrets.DOCKERHUB_REGISTRY_PASSWORD }}
        repository: ${{ vars.DOCKERHUB_REGISTRY_USER }}/alpine
        short-description: ${{ github.event.repository.description }}
        readme-filepath: README.md
      env:
        DOCKERHUB_REGISTRY_USER: ${{ vars.DOCKERHUB_REGISTRY_USER }}
        DOCKERHUB_REGISTRY_PASSWORD: ${{ secrets.DOCKERHUB_REGISTRY_PASSWORD }}
